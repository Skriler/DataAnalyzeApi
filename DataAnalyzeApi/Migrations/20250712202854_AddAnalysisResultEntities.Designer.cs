// <auto-generated />
using System;
using DataAnalyzeApi.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAnalyzeApi.Migrations
{
    [DbContext(typeof(DataAnalyzeDbContext))]
    [Migration("20250712202854_AddAnalysisResultEntities")]
    partial class AddAnalysisResultEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("AnalysisResultSequence");

            modelBuilder.Entity("ClusterDataObjects", b =>
                {
                    b.Property<long>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectsId")
                        .HasColumnType("bigint");

                    b.HasKey("ClusterId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("ClusterDataObjects");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.AnalysisResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"AnalysisResultSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DatasetId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IncludeParameters")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Clustering.Cluster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClusterAnalysisResultId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClusterAnalysisResultId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Similarity.SimilarityPair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ObjectAId")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectBId")
                        .HasColumnType("bigint");

                    b.Property<long>("SimilarityAnalysisResultId")
                        .HasColumnType("bigint");

                    b.Property<double>("SimilarityPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ObjectAId");

                    b.HasIndex("ObjectBId");

                    b.HasIndex("SimilarityAnalysisResultId");

                    b.ToTable("SimilarityPairs");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.DataObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DatasetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable("DataObjects");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Dataset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Parameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DatasetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.ParameterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParameterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ParameterValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Clustering.ClusterAnalysisResult", b =>
                {
                    b.HasBaseType("DataAnalyzeApi.Models.Entities.Analysis.AnalysisResult");

                    b.Property<int>("Algorithm")
                        .HasColumnType("integer");

                    b.HasIndex(new[] { "DatasetId" }, "IX_ClusterAnalysisResults_DatasetId");

                    b.HasIndex(new[] { "RequestHash" }, "IX_ClusterAnalysisResults_RequestHash");

                    b.ToTable("ClusterAnalysisResults", (string)null);
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Similarity.SimilarityAnalysisResult", b =>
                {
                    b.HasBaseType("DataAnalyzeApi.Models.Entities.Analysis.AnalysisResult");

                    b.HasIndex(new[] { "DatasetId" }, "IX_SimilarityAnalysisResults_DatasetId");

                    b.HasIndex(new[] { "RequestHash" }, "IX_SimilarityAnalysisResults_RequestHash");

                    b.ToTable("SimilarityAnalysisResults", (string)null);
                });

            modelBuilder.Entity("ClusterDataObjects", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.Analysis.Clustering.Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAnalyzeApi.Models.Entities.DataObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.AnalysisResult", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.Dataset", "Dataset")
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Clustering.Cluster", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.Analysis.Clustering.ClusterAnalysisResult", "ClusterAnalysisResult")
                        .WithMany("Clusters")
                        .HasForeignKey("ClusterAnalysisResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterAnalysisResult");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Similarity.SimilarityPair", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.DataObject", "ObjectA")
                        .WithMany()
                        .HasForeignKey("ObjectAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAnalyzeApi.Models.Entities.DataObject", "ObjectB")
                        .WithMany()
                        .HasForeignKey("ObjectBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAnalyzeApi.Models.Entities.Analysis.Similarity.SimilarityAnalysisResult", "SimilarityAnalysisResult")
                        .WithMany("SimilarityPairs")
                        .HasForeignKey("SimilarityAnalysisResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectA");

                    b.Navigation("ObjectB");

                    b.Navigation("SimilarityAnalysisResult");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.DataObject", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.Dataset", "Dataset")
                        .WithMany("Objects")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Parameter", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.Dataset", "Dataset")
                        .WithMany("Parameters")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.ParameterValue", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.DataObject", "Object")
                        .WithMany("Values")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAnalyzeApi.Models.Entities.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAnalyzeApi.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAnalyzeApi.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.DataObject", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Dataset", b =>
                {
                    b.Navigation("Objects");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Clustering.ClusterAnalysisResult", b =>
                {
                    b.Navigation("Clusters");
                });

            modelBuilder.Entity("DataAnalyzeApi.Models.Entities.Analysis.Similarity.SimilarityAnalysisResult", b =>
                {
                    b.Navigation("SimilarityPairs");
                });
#pragma warning restore 612, 618
        }
    }
}
